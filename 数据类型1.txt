#字符串
#声明：
''
""
''' '''

#符号：
+
*
in
not in
is
not is
[]

#获取字符串元素
s = 'hello'
s[index]

切片：
s[::step]   #包前不包后

内置函数：
lower()---->小写
upper()---->大写
replace()---->替换
split()---->切割
find()---->查找 rfind() lfind()
strip()---->去除空格 rstrip() lstrip()
join()---->拼接
isalpha()  isdigit---->判断







                    列表      元组      字典
          
定义：               []        ()        {}

关键字：             list      tuple     dict

数值：               ele       ele       key:value       #element元素

特点：               增删改查   只可查     键唯一，值不唯一；
                                         增删改查


符号：
+       ----》合并
*       ----》[]*n
in      ----》'a'  in []/()  --->True False
not in  ----》
is      ----》地址是否相等
not is  ----》


列表list常用函数：
len(list)       ---->int
sorted(list)    ---->排序
max()/min()     ---->最大/最小值
list()          ---->强制转换成列表
enumerate(list) ---->枚举    返回 index value


列表list自身函数：
添加元素：
append()        ---->末尾添加
extend()        ---->末尾添加一组元素
insert()        ---->指定位置插入


删除元素：
del list1[index]  ---->删除指定位置的元素
remove(obj)       ---->删除指定位置的元素，不存在会报错
pop()             ---->删除最后一个元素   “队列 FIFO” “栈 FILO”
clear()           ---->删除全部元素


其他函数：
count()         ---->统计含有多少元素
sort()          ---->排序
reverse()       ---->翻转

算法：
选择排序:先全部遍历找出最小/大的元素放在第一位，接着从剩余的元素继续找出最小/大的元素放在第二位。依此类推
li=[32,5,76,34,1,4,5]
for i in range(len(li)):
    for j in range(i+1,len(li)):
        if li[i]>li[j]:
            li[i],li[j]=li[j],li[i]
            print(li)


冒泡排序:比较相邻的元素,如果第一个比第二个大，就交换他们两个。依此类推
li=[32,5,76,34,1,4,5]
for i in range(len(li)-1):
    for j in range(len(li)-1-i):
        if li[j]>li[j+1]:
            li[j],li[j+1]=li[j+1],li[j]
            print(li)



元组同样可以使用系统自带给list的函数：max/min/sorted/len……,但元组不支持增删改，只支持查。
查询有两种方法：tuple[index]         tuple[::]
要修改元组内的元素可以通过转换成列表进行操作。



字典类型转换：
dict1 = dict([('name','Tom')('age',18)])   #必须两两配对

字典的增删改查
#增加：
dict[key] = value       ---->dict1['name']='Tom'        #字典中如果有相同的key，输入的value会覆盖原来的value



'''
案例：用户注册
1.username
2.password
3.email
4.phone
'''

#模拟数据库,存放用户信息
database=[]

while True:
  username = input('输入用户名：')
  password = input('输入密码：')
  repassword=input('请确认密码:')
  email    = input('输入邮箱：')
  phone    = input('输入手机号码：')

  #定义字典
  user={}
  if password==repassword:
      user['username']=username
      user['password']=password
      user['email']=email
      user['phone']=phone
      #保存到数据库
      database.append(user)
      print(database)

      answer=input('是否继续注册？y/n \n')
      if answer!='y':
          break
  else:
      print('注册失败，密码不一致！')






#修改
list[index]=new_value
dict[key]=new_value   #字典中有相同key，则覆盖value

#查询
list[index]   ---->ele
dict[key]     ---->value

list1 = [1,3,4,7]
print(list1[2])

dict1 = {'name':'Tom','age':'18','sex':'boy'}
print(dict1['name'])   #字典中找元素要根据key

#字典的函数：
items()             ----》取出字典中的key，value，以列表形式表现
values()            ----》取出字典中所有的value
keys()              ----》取出字典中所有的key

'''
dict1 = {'name':'Tom','age':'18','sex':'boy'}
for i in dict1:
print(i)
#只能得到key，无法获得value
'''

'''
dict1 = {'name':'Tom','age':'18','sex':'boy'}
for key,value in dict1.items():
    print(key,value,sep='  ')
'''

dict[key]
根据key查询value，但如果字典中没有该key，会报错
所以使用字典内置函数：get()
dict.get(key)--------》可以设置默认值，dict.get(key,default)
没有相应的key则返回none



#字典删除
del dict[key]  ----->没有key则报错
字典内置函数：
dict.pop(key[,default])---->根据key删除相应的key，返回删除成功的key的value；没有相对应的key，则返回default
dict.popitem()---->随机删除字典中的键值对（但一般是从末尾开始删除）
>>>       '''
          dict1 = {'name':'Tom','age':'18','sex':'boy'}
          result = dict1.popitem()
          print(result)
          print(dict1)
          '''
          
dict.clear()---->清除字典中所有键值对

#其他字典内置函数
update()---->合并操作,有相同的值则覆盖
>>>       '''
          dict1 = {'name':'Tom','age':'18','sex':'boy'}
          dict2 = {'name':'Lucas','age':'20','sex':'boy','email':'123456@123.com'}
          dict1.update(dict2)
          print(dict1)
          '''

fromkeys(seq)---->将seq转成字典，没有指定value则value使用none
>>>list1=[1,23,4]
   dict1=dict.fromkeys(list1,default)
   
   
   
