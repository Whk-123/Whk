####内部函数
特点：
1.可以访问外部函数的变量
2.内部函数可以修改外部函数的可变类型的变量
3.内部函数修改全局的不可变变量时，需要在内部函数声明global 变量名
  内部函数修改外部函数的不可变的变量时，需要在内部函数声明nonlocal 变量名
4.locals() 查看本地变量，以字典形式输出
  globals()查看全局变量，以字典形式输出（有系统自动生成的变量）
  
a = 100
print(globals())      #查看全局变量

def func():
    n = 100
    list1 = [3, 4, 1, 6]

    def inner_func():
        global a
        nonlocal n  # 可在内部函数修改外部函数
        for index, value in enumerate(list1):
            list1[index] = value + n

        list1.sort()
        n += 100
        a += 100

    inner_func()  # 如果不调用内部函数inner_func(),内部函数内的list修改不会使外部函数的list发生改变
    print(n)
    print(list1)
    print(locals())     #查看func()内的变量


func()




---------------------------------------------------------------------
###闭包
条件：
1.外部函数中定义了内部函数
2.外部函数有返回值是内部函数名

格式：
def 外部函数():
  '''
  def 内部函数():
    '''
  return 内部函数
  
x = 外部函数()   #x = 内部函数
x()              #x() = 内部函数()
